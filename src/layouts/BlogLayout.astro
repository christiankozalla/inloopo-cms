---
import { ViewTransitions } from "astro:transitions";
import CookieBanner from "../components/CookieBanner.astro";
import Navbar from "../components/Navbar.astro";
import ReadingProgress from "../components/ReadingProgress.astro";
import Footer from "../components/Footer.astro";

//import styles
import "../styles/styles.css";

interface Props {
  title: string;
  locale: "de" | "en";
  opengraph?: {
    title: string;
    url: string;
    image: {
      url?: string;
      width?: number;
      height?: number;
    };
    type: string;
    description: string;
    locale: string;
  };
  canonical?: string;
}

const { title, opengraph, locale, canonical = new URL(Astro.url.pathname, Astro.site) } = Astro.props;
---

<!doctype html>
<html lang={locale || opengraph?.locale || "de"}>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>

    <style is:inline>
      @font-face {
        font-family: "Cera Pro Black";
        src:
          url("/fonts/CeraProBlack.ttf") format("truetype"),
          url("/fonts/CeraProBlack.otf") format("opentype");
        font-display: optional;
      }

      @font-face {
        font-family: "Quattrocento Sans";
        src: url("/fonts/QuattrocentoSans-Regular.ttf") format("truetype");
        font-display: optional;
      }
    </style>

    <meta name="robots" content="index,follow" />
    <link rel="canonical" href={canonical} />
    {opengraph?.description ? <meta name="description" content={opengraph.description} /> : null}

    {
      opengraph && (
        <>
          <>
            <meta property="og:title" content={opengraph.title || title} />
            <meta property="og:url" content={opengraph.url} />
            <meta property="og:type" content={opengraph.type} />
            <meta property="og:description" content={opengraph.description} />
            <meta property="og:locale" content={opengraph.locale} />
            <meta name="twitter:card" content="summary_large_image" />
            <meta name="twitter:site" content="@philipp_kozalla" />
            <meta name="twitter:creator" content="@philipp_kozalla" />
            <meta name="twitter:title" content={opengraph.title || title} />
            <meta name="twitter:description" content={opengraph.description} />
          </>
          <>
            {opengraph.image.width ? <meta property="og:image:width" content={String(opengraph.image.width)} /> : null}
            {opengraph.image.height ? (
              <meta property="og:image:height" content={String(opengraph.image.height)} />
            ) : null}
            {opengraph.image.url ? (
              <>
                <meta name="twitter:image" content={opengraph.image.url} />
                <meta property="og:image" content={opengraph.image.url} />
              </>
            ) : null}
          </>
        </>
      )
    }

    <!-- Google tag (gtag.js) -->
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }

      gtag("consent", "default", {
        ad_storage: "denied",
        ad_user_data: "denied",
        ad_personalization: "denied",
        analytics_storage: "denied",
      });
    </script>
    <script is:inline async src="https://www.googletagmanager.com/gtag/js?id=G-20XTP80H4M"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }

      gtag("js", new Date());

      gtag("config", "G-20XTP80H4M");
    </script>

    <!-- FAVICON -->
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico" />
    <slot name="head" />

    <script>
      // Load lite-youtube-embend JS & CSS lazily (https://www.npmjs.com/package/lite-youtube-embed)
      // Copied to public dir with 'cp node_modules/lite-youtube-embed/src/lite-yt-embed.js public/lite-youtube-embed/lite-yt-embed.js' (CSS respectively)
      document.addEventListener("DOMContentLoaded", () => {
        const observer = new IntersectionObserver(
          (entries, observer) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                // Add stylesheet link to the head
                const stylesheet = document.createElement("link");
                stylesheet.rel = "stylesheet";
                stylesheet.href = "/lite-youtube-embed/lite-yt-embed.css";
                document.head.appendChild(stylesheet);

                // Add script to the head
                const script = document.createElement("script");
                script.src = "/lite-youtube-embed/lite-yt-embed.js";
                document.head.appendChild(script);

                // Unobserve all observed elements
                observer.disconnect();
              }
            });
          },
          {
            root: null, // Use the viewport as the root
            rootMargin: "0px 0px -80px 0px", // Trigger 80px before the element is in view
            threshold: 0, // Trigger as soon as any part of the element is in view
          }
        );

        // Observe all lite-youtube elements
        const liteYouTubeElements = document.querySelectorAll("lite-youtube");
        liteYouTubeElements.forEach((element) => {
          observer.observe(element);
        });
      });
    </script>

    <ViewTransitions />
  </head>
  <body>
    <ReadingProgress />
    <div class="wrapper">
      <Navbar lang={locale} />
      <main class="wrapper-content-blog">
        <slot />
      </main>
    </div>
    <Footer lang={locale} />
    <CookieBanner lang={locale} />
  </body>
</html>
