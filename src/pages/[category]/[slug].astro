---
import BlogLayout from "../../layouts/BlogLayout.astro";
import BlogTableOfContents from "../../components/BlogTableOfContents.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import Author from "../../components/Author.astro";
import BlogFeedback from "../../components/BlogFeedback.astro";
import { contentfulClient, renderOptionsAndVideos, type Post } from "../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import StructuredData from "../../components/StructuredData.astro";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<Post>({
    content_type: "englishPost",
  });

  return entries.items
    .filter((item) => item.fields.slug && item.fields.category)
    .map((item) => {
      const { videos, renderOptions } = renderOptionsAndVideos();
      return {
        params: { category: item.fields.category, slug: item.fields.slug },
        props: {
          title: item.fields.title,
          body: documentToHtmlString(item.fields.body, renderOptions),
          date: item.fields.published ? new Date(item.fields.published).toLocaleDateString("en-GB") : null,
          datePublished: item.fields.published,
          dateModified: item.sys.updatedAt ? new Date(item.sys.updatedAt) : null,
          author: "fields" in item.fields.author ? item.fields.author.fields : {},
          heroImage: {
            url:
              item.fields.heroImage && "fields" in item.fields.heroImage
                ? item.fields.heroImage.fields?.file?.url.startsWith("//")
                  ? "https:" + item.fields.heroImage?.fields.file.url
                  : item.fields.heroImage?.fields.file?.url
                : undefined,
            height:
              item.fields.heroImage && "fields" in item.fields.heroImage
                ? item.fields.heroImage?.fields?.file?.details?.image?.height
                : undefined,
            width:
              item.fields.heroImage && "fields" in item.fields.heroImage
                ? item.fields.heroImage?.fields?.file?.details?.image?.width
                : undefined,
          },
          seoDescription: item.fields.seoDescription,
          lang: "en" as const,
          videos,
        },
      };
    });
}

const { title, date, body, author, heroImage, seoDescription, lang } = Astro.props;
const { category, slug } = Astro.params as { category: string; slug: string };
const url = new URL(Astro.url.pathname, Astro.site).toString();
---

<BlogLayout
  title={title}
  locale={lang}
  opengraph={{ title, url, locale: lang, image: heroImage, description: seoDescription, type: "article" }}>
  <StructuredData slot="head" {...Astro.props} />
  <BlogTableOfContents />
  <Breadcrumbs title={title} category={category} slug={slug} lang={lang} />
  <h1 class="article__main-heading">{title}</h1>
  <Author author={author} published={date} url={url} />
  <article set:html={body} />
  <BlogFeedback lang={lang} />
  <style is:inline>
    article a {
      color: #ff6b35;
      text-decoration: none;
    }

    article a:hover {
      border-bottom: 1px solid #ff6b35;
      padding-bottom: 4px;
    }

    .article__table {
      overflow-x: auto;
      margin-bottom: 24px;
    }

    .fullscreen {
      position: fixed;
      top: 80px;
      left: 0;
      right: 12px;
      z-index: 3;
    }

    body.fullscreen-mode {
      overflow-y: hidden;
    }

    body.fullscreen-mode::before {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 2;
    }

    @media (min-width: 760px) {
      img {
        cursor: pointer;
      }
    }

    @media only screen and (max-width: 40em) {
      .article__table {
        text-align: center;
      }
    }
  </style>
  <script src="../../components/fullscreen-images.ts"></script>
</BlogLayout>
