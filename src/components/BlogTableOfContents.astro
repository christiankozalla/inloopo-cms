<aside class="toc" id="toc">
  <h6 class="toc__heading--mobile">Inhaltsverzeichnis</h6>
  <ol class="toc__nav"></ol>
</aside>

<style is:inline>
  .toc {
    display: none;
    z-index: 1;
    top: 0;
    left: 12px;
    width: 300px;
    bottom: 0;
    overflow: hidden;
    padding-top: 120px;
    margin-left: 20px;
    position: fixed;
    animation: fadeEffect 3s;
    /* fading effect takes 3s */
  }

  @keyframes fadeEffect {
    /* from 0 to full opacity */
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  .toc__link {
    text-decoration: none;
    list-style: none;
    display: block;
    padding: 6px 0;
    color: #171614;
    transition: all 0.3s cubic-bezier(0.23, 1, 0.32, 1);
  }

  .toc__link:hover,
  .toc__link:focus {
    color: #ff6b35;
  }

  .toc__link.active {
    /* transform: translateX(8px); */
    padding: 2px 0 2px 8px;
    margin-left: 8px;
    color: #ff6b35;
    border-left: 3px solid #ff6b35;
  }

  .toc input[type="checkbox"] {
    display: none;
  }
</style>

<script is:inline>
  window.addEventListener("DOMContentLoaded", function () {
    // inner width of the screen is above 979px, then execute tocHandler()
    if (window.innerWidth > 979) tocHandler();
  });

  function tocHandler() {
    // Code for TOC Observer
    const headings = document.querySelectorAll("h2[id^=point]"); // all element whose id begins with "point"
    const links = Array.from(headings).map(
      (el, i) => `<li>
          <a rel="nofollow" href=#${el.id} class="toc__link">${i + 1}. ${el.dataset.toclink || el.innerText}</a>
      </li>`,
    );
    document.querySelector(".toc__nav").innerHTML = links.join("");

    const options = {
      root: document,
      threshold: 1.0,
      rootMargin: "80px 0px 0px 0px",
    };
    const anchors = document.querySelectorAll(".toc .toc__link");
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          anchors.forEach((link) => {
            if (`#${entry.target.id}` === link.getAttribute("href")) {
              link.classList.add("active");
            } else {
              link.classList.remove("active");
            }
          });
        }
      });
    }, options);

    headings.forEach((heading) => observer.observe(heading));

    var isTocShown = false;
    // Show TOC when scroll down
    window.addEventListener("scroll", showFunction);

    function showFunction() {
      if (isTocShown) return;
      if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        document.getElementById("toc").style.display = "block";
        isTocShown = true;
      }
    }
  }
</script>
